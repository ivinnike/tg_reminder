import logging
from datetime import datetime, timedelta
import sqlite3
import telebot
from telebot import types

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
bot = telebot.TeleBot('6358354673:AAHIsFscfwIBnBPhQnfgUYVIApl9ZhkSnwc')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('reminder.db', check_same_thread=False)
cursor = conn.cursor()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ó–∞–ø–∏—Å–∞—Ç—å üìù')
    markup.row('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ üìÖ')
    markup.row('–£–¥–∞–ª–∏—Ç—å üóëÔ∏è')
    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å"
@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø–∏—Å–∞—Ç—å üìù')
def add_meeting(message):
    bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è')
    bot.register_next_step_handler(message, save_title)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
def save_title(message):
    chat_id = message.chat.id
    title = message.text

    bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì')
    bot.register_next_step_handler(message, save_date, title)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
def save_date(message, title):
    chat_id = message.chat.id
    date = message.text

    bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú')
    bot.register_next_step_handler(message, save_time, title, date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
def save_time(message, title, date):
    chat_id = message.chat.id
    time = message.text

    try:
        meeting_datetime_str = date + ' ' + time
        meeting_datetime = datetime.strptime(meeting_datetime_str, '%d-%m-%Y %H:%M')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT INTO reminder (title, datetime) VALUES (?, ?)', (title, meeting_datetime))
        conn.commit()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è
        reminder_datetime = meeting_datetime - timedelta(minutes=5)
        bot.send_message(chat_id=chat_id, text='üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.')

    except ValueError:
        bot.send_message(chat_id=chat_id, text='–û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫"
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ üìÖ')
def view_meetings(message):
    cursor.execute('SELECT title, datetime FROM reminder')
    result = cursor.fetchall()

    if result:
        for row in result:
            title, datetime_info = row
            response = f'üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\nüìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime_info}'
            bot.send_message(chat_id=message.chat.id, text=response)
    else:
        bot.send_message(chat_id=message.chat.id, text='–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å üóëÔ∏è')
def delete_meeting(message):
    keyboard = types.InlineKeyboardMarkup()
    cursor.execute('SELECT title, datetime FROM reminder')
    result = cursor.fetchall()

    if result:
        for row in result:
            title, datetime_info = row
            button_text = f'{title} - {datetime_info}'
            button = types.InlineKeyboardButton(button_text, callback_data=title)
            keyboard.add(button)

        bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=keyboard)
    else:
        bot.send_message(chat_id=message.chat.id, text='–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ InlineKeyboard
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    meeting_title = call.data
    cursor.execute('DELETE FROM reminder WHERE title = ?', (meeting_title,))
    conn.commit()

    if cursor.rowcount > 0:
        bot.send_message(chat_id=call.message.chat.id, text='–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
    else:
        bot.send_message(chat_id=call.message.chat.id, text='–û—à–∏–±–∫–∞! –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()